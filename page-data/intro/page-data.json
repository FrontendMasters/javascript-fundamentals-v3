{"componentChunkName":"component---src-templates-lesson-template-js","path":"/intro","result":{"data":{"markdownRemark":{"html":"<h3 id=\"layout-options-in-css-overview\" style=\"position:relative;\"><a href=\"#layout-options-in-css-overview\" aria-label=\"layout options in css overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Layout Options in CSS Overview</h3>\n<p>Jen runs through a few slides describing layout options in CSS.</p>\n<p><a href=\"https://github.com/FrontendMasters/grid-flexbox-v2/blob/main/day-1-flexbox/1-flexbox-intro/day1.pdf\">Slide PDF</a></p>\n<h3 id=\"flexbox-intro-to-basic-properties\" style=\"position:relative;\"><a href=\"#flexbox-intro-to-basic-properties\" aria-label=\"flexbox intro to basic properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flexbox intro to basic properties</h3>\n<p>Jen demonstrates the basic Flexbox properties as described below.</p>\n<p><a href=\"https://codepen.io/jen4web/pen/yLbjKWm?editors=1100\">Starting CodePen</a></p>\n<p><a href=\"https://github.com/FrontendMasters/grid-flexbox-v2/blob/main/day-1-flexbox/1-flexbox-intro/Flexbox%20Properties.txt\">Flexbox Properties.txt</a> is a useful document to have nearby when working in Flexbox. It explains which properties apply to parents and children, along with most of their possible values.</p>\n<p>You may also refer to <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">CSS Tricks Guide to Flexbox.</a></p>\n<h4 id=\"flexbox-explained\" style=\"position:relative;\"><a href=\"#flexbox-explained\" aria-label=\"flexbox explained permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flexbox Explained</h4>\n<p>For each of the directions below, add these declarations to the existing ul or li elements.</p>\n<p>The first grouping has to do with the flex-container, or the ul in this example.</p>\n<ol>\n<li>\n<p><strong>ul { display: flex; }</strong>\nThis gets everything on a single line. By default, the direction is in a row and in standard order.</p>\n</li>\n<li>\n<p><strong>ul {display: flex; flex-direction: X; }</strong>\n<em>X = <code class=\"language-text\">row</code>, <code class=\"language-text\">row-reverse</code>, <code class=\"language-text\">column</code>, <code class=\"language-text\">column-reverse</code></em>\nThis takes the elements and places them in a single row or a single column. Ordering is either in source order or the reverse of the source order. Flex-direction defines our main axis.</p>\n</li>\n<li>\n<p><strong>ul { display: flex; flex-direction: as before, flex-wrap: X;}</strong>\n<em>X = <code class=\"language-text\">wrap</code>, <code class=\"language-text\">wrap-reverse</code>, or <code class=\"language-text\">nowrap</code></em>\n<code class=\"language-text\">flex-direction</code> orders the individual items.\n<code class=\"language-text\">flex-wrap</code> orders the rows/columns created.</p>\n</li>\n<li>\n<p><strong>ul { display: flex; flex-flow: X;}</strong>\n<code class=\"language-text\">flex-flow</code> is shorthand for <code class=\"language-text\">flex-direction</code> and <code class=\"language-text\">flex-wrap</code>\nIt takes two arguments, just like the individual properties.\nExample: <code class=\"language-text\">row wrap</code>, <code class=\"language-text\">row-reverse wrap</code>, <code class=\"language-text\">column nowrap</code>, <code class=\"language-text\">column-reverse wrap-reverse</code>, etc\nJust because the row/column is reversed does not mean the wrap has to be reversed</p>\n</li>\n<li>\n<p><strong>ul { display: flex; flex-flow: row wrap; justify-content: X; }</strong>\n<em>X = <code class=\"language-text\">flex-start</code>, <code class=\"language-text\">flex-end</code>, <code class=\"language-text\">center</code>, <code class=\"language-text\">space-between</code>, <code class=\"language-text\">space-around</code>, <code class=\"language-text\">space-evenly</code></em>\n<code class=\"language-text\">justify-content</code> determines the distribution of the flex items within the flex container on the main axis — in other words, how should space be allocated relative to the width of each item?\nIf flex direction is row, then horizontal is the main axis. When flex-direction is column, then column is the main axis.</p>\n</li>\n<li>\n<p><strong>ul { display: flex; flex-flow: row wrap; justify-content: center; align-items: X}</strong>\n<em>X = <code class=\"language-text\">flex-start</code>, <code class=\"language-text\">flex-end</code>, <code class=\"language-text\">center</code>, <code class=\"language-text\">baseline</code>, <code class=\"language-text\">stretch</code></em>\nThis aligns our items on the cross axis. Since we’re working with a row currently, this is aligning elements in vertical space.</p>\n</li>\n<li>\n<p><strong>ul { display: flex; flex-flow: row wrap; justify-content: center; align-items: center; align-content: X}</strong>\n*X = <code class=\"language-text\">flex-start</code>, <code class=\"language-text\">flex-end</code>, <code class=\"language-text\">center</code>, <code class=\"language-text\">space-between</code>, <code class=\"language-text\">space-around</code>, <code class=\"language-text\">space-evenly</code>\nNotice that changing <code class=\"language-text\">align-content</code> further aligns all boxes to the center of the <code class=\"language-text\">ul</code>. Without this, the boxes are distributed with <code class=\"language-text\">space-around</code> by default.</p>\n</li>\n</ol>\n<p>The next set of properties are about the individual flex-items, or the li’s in this example.</p>\n<ol start=\"8\">\n<li>\n<p><strong>.flex2{ border: 2px dotted blue; order: X; }</strong>\n<em>X can be an integer.</em>\n1 will move the <code class=\"language-text\">.flex2</code> boxes to the end of the list, while -1 will move them to the start of the list. 0 is neutral.</p>\n</li>\n<li>\n<p><strong>.flex2{ border: 2px dotted blue; flex-basis: X; }</strong>\n<code class=\"language-text\">flex-basis</code> is analogous to width, but not quite the same thing. Width is an absolute measurement — an element is that wide, all the time. We can measure width in relative units (say 25% instead of 250px), but in the end, the measurement itself never changes. For <code class=\"language-text\">flex-basis</code>, we try to achieve a given width with the space available. It could be smaller than this width, or it could be wider, depending on the extra space and how that’s supposed to be distributed. Distribution of extra space is controlled by <code class=\"language-text\">flex-grow</code> and <code class=\"language-text\">flex-shrink</code> (below).</p>\n</li>\n<li>\n<p><strong>.flex2{ border: 2px dotted blue; flex-grow: X; }</strong>\n<em>X can be 0 or a positive integer.</em> (It won’t break with a negative integer, but it won’t do anything either.)\n<code class=\"language-text\">flex-grow</code>, like <code class=\"language-text\">flex-shrink</code> (below), distributes extra space once each element is displayed on the page. In this example, our flex items are center-aligned (see <code class=\"language-text\">justify-content: center</code> on the ul). By assigning a value to <code class=\"language-text\">flex-grow</code>, any extra space will be assigned in greater proportion to this element, making it larger relative to the other items. Note there is no unit with this measurement — it’s simply a proportion.</p>\n</li>\n<li>\n<p><strong>.flex2{ border: 2px dotted blue; flex-shrink: X; }</strong>\n<em>X can be 0 or a positive integer.</em> (It won’t break with a negative integer, but it won’t do anything either.)\n<code class=\"language-text\">flex-shrink</code> controls what happens to extra space as elements shrink. By assigning a value to flex-shrink, as elements get smaller on the page, this element will get smaller faster than the others. Note there is no unit with this measurement — it’s simply a proportion.</p>\n</li>\n<li>\n<p><strong>.flex2{ border: 2px dotted blue; flex: G S B; }</strong>\nG = <code class=\"language-text\">flex-grow</code>\nS = <code class=\"language-text\">flex-shrink</code>\nB = <code class=\"language-text\">flex-basis</code>\nThis is the shorthand for combining <code class=\"language-text\">flex-grow</code>, <code class=\"language-text\">flex-shrink</code>, and <code class=\"language-text\">flex-basis</code>.</p>\n</li>\n</ol>","frontmatter":{"path":"/intro","title":"Flexbox Introduction","order":"1A","section":"Flexbox"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"2F","path":"/card-layouts","title":"Card Layouts"}}},{"node":{"frontmatter":{"order":"2E","path":"/css-grid-exercises","title":"CSS Grid Exercises"}}},{"node":{"frontmatter":{"order":"2A","path":"/css-grid-intro","title":"Introducing CSS Grid"}}},{"node":{"frontmatter":{"order":"2G","path":"/final-project","title":"Final Project"}}},{"node":{"frontmatter":{"order":"1D","path":"/flexbox-exercises","title":"Flexbox Exercises"}}},{"node":{"frontmatter":{"order":"1C","path":"/flexbox-figure-figcaption","title":"Figure Caption & Figure Caption with Flexbox"}}},{"node":{"frontmatter":{"order":"1B","path":"/flexbox-grid-system","title":"Flexbox Grid System"}}},{"node":{"frontmatter":{"order":"1G","path":"/flexbox-wrapup","title":"Flexbox Wrapup"}}},{"node":{"frontmatter":{"order":"2D","path":"/grid-figure-figcaption","title":"Figure Caption & Figure Caption with CSS Grid"}}},{"node":{"frontmatter":{"order":"2B","path":"/grid-mondrian-exercise","title":"Mondrian Painting Exercise"}}},{"node":{"frontmatter":{"order":"2C","path":"/grid-system-css-grid","title":"Grid System with CSS Grid"}}},{"node":{"frontmatter":{"order":"1E","path":"/header-navbar","title":"Flexbox Header and Navbar"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Flexbox Introduction"}}},{"node":{"frontmatter":{"order":"2F","path":"/magazine-layouts","title":"Magazine Layouts"}}},{"node":{"frontmatter":{"order":"1F","path":"/responsive-images","title":"Responsive Images"}}}]}},"pageContext":{}},"staticQueryHashes":["137611351"]}